generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String             @id @default(cuid())
  username           String             @unique
  email              String?            @unique
  type               UserType
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  donations          Donation[]
  pledges            Pledge[]           @relation("DonorPledges")
  socialImpactPoints SocialImpactPoint? @relation("UserSocialImpactPoints")

  @@map("users")
}

model Pledge {
  id                   String       @id @default(cuid())
  donorId              String       @map("donor_id")
  amount               Float
  amountSent           Float?       @default(0) @map("amount_sent")
  completionPercentage Float?       @default(0) @map("completion_percentage")
  status               PledgeStatus @default(PENDING)
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")
  donations            Donation[]
  donor                User         @relation("DonorPledges", fields: [donorId], references: [id], onDelete: Cascade)

  @@map("pledges")
}

model Donation {
  id            String   @id @default(cuid())
  pledgeId      String   @map("pledge_id")
  beneficiaryId String   @map("beneficiary_id")
  amount        Float
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  beneficiary   User     @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  pledge        Pledge   @relation(fields: [pledgeId], references: [id], onDelete: Cascade)

  @@map("donations")
}

model SocialImpactPoint {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  points    Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation("UserSocialImpactPoints", fields: [userId], references: [id], onDelete: Cascade)

  @@map("social_impact_points")
}

enum UserType {
  DONOR
  DONEE
}

enum PledgeStatus {
  PENDING
  TASK1_COMPLETE
  TASK2_COMPLETE
  COMPLETED
}
